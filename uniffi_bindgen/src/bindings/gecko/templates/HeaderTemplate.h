// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#ifndef mozilla_{{ ci.namespace() }}
#define mozilla_{{ ci.namespace() }}

#include "{{ ci.namespace()|class_name_webidl }}.h"

#include <functional>

#include "nsCOMPtr.h"
#include "nsIVariant.h"
#include "nsTArray.h"
#include "prnetdb.h"

#include "mozilla/Atomics.h"
#include "mozilla/Casting.h"
#include "mozilla/CheckedInt.h"
#include "mozilla/Result.h"
#include "mozilla/ResultExtensions.h"
#include "mozilla/Utf8.h"

#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Record.h"
#include "mozilla/dom/{{ ci.namespace()|class_name_webidl }}Binding.h"

extern "C" {

struct RustBuffer {
  int64_t mLen;
  uint8_t* mData;
};

struct RustError {
  int32_t mCode;
  char* mMessage;
};

{% for func in ci.iter_ffi_function_definitions() -%}
{%- match func.return_type() -%}
{%- when Some with (type_) %}
{{ type_|type_ffi }}
{% when None %}
void
{%- endmatch %}
{{ func.name() }}(
    {%- for arg in func.arguments() %}
    {{ arg.type_()|type_ffi }} {{ arg.name() -}}{%- if loop.last -%}{%- else -%},{%- endif -%}
    {%- endfor %}
    {%- if func.has_out_err() -%}{%- if func.arguments().len() > 0 %},{% endif %}
    RustError* out_err
    {%- endif %}
);

{% endfor -%}

}  // extern "C"

namespace mozilla {
namespace {{ ci.namespace() }} {

namespace detail {

{% include "Detail.cpp" %}

}  // namespace detail

{%- let functions = ci.iter_function_definitions() %}
{%- if !functions.is_empty() %}

class {{ ci.namespace()|class_name_cpp }} final {
 public:
  {{ ci.namespace()|class_name_cpp }}() = default;

 private:
  ~{{ ci.namespace()|class_name_cpp }}() = default;
};

{% endif -%}

{%- for obj in ci.iter_object_definitions() %}

class {{ obj.name()|class_name_cpp }} final {
 public:
  // TODO: We may not need the cycle collecting machinery if all calls create
  // a new object. See the note about `[NewObject]` in
  // https://developer.mozilla.org/en-US/docs/Mozilla/WebIDL_bindings.
  // NS_DECL_CYCLE_COLLECTING_ISUPPORTS
  // NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS({{ obj.name()|class_name_cpp }})

  {{ ci.namespace()|class_name_cpp }}() = default;

  // TODO: More WebIDL machinery (`WrapJSObject`, `GetParentObject`, etc.)

 private:
  ~{{ ci.namespace()|class_name_cpp }}();

  mozilla::Atomic<int64_t> mHandle;
};

{% endfor -%}

}  // namespace {{ ci.namespace() }}
}  // namespace mozilla

#endif  // mozilla_{{ ci.namespace() }}
