// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

{% import "macros.cpp" as cpp %}

#include "mozilla/dom/{{ obj.name()|class_name_webidl }}.h"
#include "mozilla/dom/{{ namespace|class_name_webidl }}Shared.h"

namespace mozilla {
namespace dom {

// Cycle collection boilerplate for our interface implementation. `mGlobal` is
// the only member that needs to be cycle-collected; if we ever add any JS
// object members or other interfaces to the class, those should be collected,
// too.
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE({{ obj.name()|class_name_webidl }}, mGlobal)
NS_IMPL_CYCLE_COLLECTING_ADDREF({{ obj.name()|class_name_webidl }})
NS_IMPL_CYCLE_COLLECTING_RELEASE({{ obj.name()|class_name_webidl }})
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION({{ obj.name()|class_name_webidl }})
  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
  NS_INTERFACE_MAP_ENTRY(nsISupports)
NS_INTERFACE_MAP_END

{{ obj.name()|class_name_cpp }}::{{ obj.name()|class_name_cpp }}(
  nsIGlobalObject* aGlobal,
  int64_t aHandle
) : mGlobal(aGlobal), mHandle(aHandle) {}

{{ obj.name()|class_name_cpp }}::~{{ obj.name()|class_name_cpp }}() {
  {{ obj.ffi_object_free().name() }}(mHandle);
}

JSObject* {{ obj.name()|class_name_cpp }}::WrapObject(
  JSContext* aCx,
  JS::Handle<JSObject*> aGivenProto
) {
  return dom::{{ obj.name()|class_name_cpp }}_Binding::Wrap(aCx, this, aGivenProto);
}

{% for cons in obj.constructors() %}
/* static */
already_AddRefed<{{ obj.name()|class_name_cpp }}> {{ obj.name()|class_name_cpp }}::Constructor(
  {% call cpp::decl_constructor_args(cons) %}
) {
  RustError err = {0, nullptr};
  {% call cpp::to_ffi_call(cons) %}
  if (err.mCode) {
    {%- if cons.throws().is_some() %}
    aRv.ThrowOperationError(err.mMessage);
    {% else -%}
    MOZ_ASSERT(false);
    {%- endif %}
    return nullptr;
  }
  nsCOMPtr<nsIGlobalObject> global = do_QueryInterface(aGlobal.GetAsSupports());
  auto result = MakeRefPtr<{{ obj.name()|class_name_cpp }}>(global, loweredRetVal_);
  return result.forget();
}
{%- endfor %}

{% for meth in obj.methods() %}
{% call cpp::decl_return_type(meth) %} {{ obj.name()|class_name_cpp }}::{{ meth.name()|fn_name_cpp }}(
  {% call cpp::decl_method_args(meth) %}
) {
  RustError err = {0, nullptr};
  {% call cpp::to_ffi_call_with_prefix("mHandle", meth) %}
  if (err.mCode) {
    {%- if meth.throws().is_some() %}
    aRv.ThrowOperationError(err.mMessage);
    {% else -%}
    MOZ_ASSERT(false);
    {%- endif %}
    {% call cpp::bail(meth) %}
  }
  {% call cpp::return(meth) %}
}
{% endfor %}

}  // namespace dom
}  // namespace mozilla
