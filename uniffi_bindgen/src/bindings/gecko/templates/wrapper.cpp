// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#include "{{ ci.namespace() }}.h"

#include "jsapi.h"

#include "mozilla/CheckedInt.h"
#include "mozilla/Result.h"
#include "mozilla/ResultExtensions.h"

namespace mozilla {
namespace {{ ci.namespace() }} {

{%- let functions = ci.iter_function_definitions() %}
{%- if !functions.is_empty() %}

NS_IMPL_ISUPPORTS({{ ci.namespace()|class_name_cpp }}, {{ ci.namespace()|interface_name_xpidl }})

{% for func in functions %}
{%- let args = func.arguments() %}
NS_IMETHODIMP
{{ ci.namespace()|class_name_cpp }}::{{ func.name()|fn_name_cpp }}(
    {%- if func.throws().is_some() %}
    JSContext* aCx{%- if !args.is_empty() || func.return_type().is_some() %}, {% endif %}
    {% endif %}
    {%- for arg in args %}
    {{ arg.type_()|arg_type_cpp }} {{ arg.name() }}{%- if !loop.last %}, {% endif %}
    {%- endfor %}
    {%- match func.return_type() -%}
    {%- when Some with (type_) %}
    {%- if func.throws().is_some() || !args.is_empty() %}, {% endif %}{{ type_|ret_type_cpp }} aRetVal
    {% else %}{% endmatch %}
) {
  {%- if func.throws().is_some() %}
  RustError err{0, nullptr};
  {% endif %}
  {%- if func.return_type().is_some() %}auto result = {% endif %}{{ func.ffi_func().name() }}(
    {%- for arg in func.arguments() %}
      {{- arg.name()|lower_cpp(arg.type_()) }}
      {%- if !loop.last %}, {% endif -%}
    {%- endfor %}
    {%- if func.throws().is_some() %}
      {%- if !args.is_empty() %},{% endif %}&err
    {%- endif %}
  );
  {%- if func.throws().is_some() %}
  if (err.mCode) {
    JS_ReportErrorUTF8(aCx, "%s", err.mMessage);
    return NS_ERROR_FAILURE;
  }
  {%- endif %}
  {%- match func.return_type() -%}
  {%- when Some with (type_) %}
  *aRetVal = {{ "_retval"|lift_cpp(type_) }};
  {% else %}{% endmatch %}
  return NS_OK;
}
{% endfor %}

{% endif -%}

}  // namespace {{ ci.namespace() }}
}  // namespace mozilla
