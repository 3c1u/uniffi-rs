// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#include "nsISupports.idl"

{%- for rec in ci.iter_record_definitions() %}
webidl {{ rec.name()|class_name_webidl }};
{% endfor %}

{%- for e in ci.iter_enum_definitions() %}
webidl {{ e.name()|class_name_webidl }};
{% endfor %}

{%- let functions = ci.iter_function_definitions() %}
{%- if !functions.is_empty() %}

[scriptable, uuid({{ config.uuid() }})]
interface {{ ci.namespace()|interface_name_xpidl }} : nsISupports {
    {#-
    // We'll need to figure out how to handle async methods. One option is
    // to declare them as `async foo()`, or an `[Async]` or `[BackgroundThread]`
    // attribute in WebIDL. Kotlin, Swift, and Python can ignore that
    // anno; Gecko will generate a method that returns a `Promise` instead, and
    // dispatches the task to the background thread.
    #}
    {% for func in functions %}
    {%- if func.throws().is_some() %}
    [implicit_jscontext]
    {% endif %}
    {%- match func.return_type() -%}{%- when Some with (type_) %}{{ type_|type_xpidl }}{% when None %}void{% endmatch %} {{ func.name()|fn_name_xpidl }}(
        {%- for arg in func.arguments() %}
        in {{ arg.type_()|type_xpidl }} {{ arg.name() }}{%- if !loop.last %}, {% endif %}
        {%- endfor %}
    );
    {% endfor %}
};

{% endif -%}

{%- for obj in ci.iter_object_definitions() %}
[scriptable, uuid({{ config.uuid() }})]
interface {{ obj.name()|interface_name_xpidl }} : nsISupports {
    {#-
    // TODO: How do we support multiple constructors?
    #}
    {%- for cons in obj.constructors() %}
    void init(
        {%- for arg in cons.arguments() %}
        in {{ arg.type_()|type_xpidl }} {{ arg.name() }}{%- if !loop.last %}, {% endif %}
        {%- endfor %}
    );
    {%- endfor %}

    {% for meth in obj.methods() -%}
    {%- match meth.return_type() -%}{%- when Some with (type_) %}{{ type_|type_xpidl }}{% when None %}void{% endmatch %} {{ meth.name()|fn_name_xpidl }}(
        {%- for arg in meth.arguments() %}
        in {{ arg.type_()|type_xpidl }} {{ arg.name() }}{%- if !loop.last %}, {% endif %}
        {%- endfor %}
    );
    {% endfor %}
};
{% endfor %}

{% import "macros.idl" as xpidl %}
