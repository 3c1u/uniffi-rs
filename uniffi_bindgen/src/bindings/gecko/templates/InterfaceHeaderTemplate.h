// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#ifndef mozilla_dom_{{ obj.name()|class_name_webidl }}
#define mozilla_dom_{{ obj.name()|class_name_webidl }}

#include "mozilla/Atomics.h"

#include "mozilla/dom/{{ ci.namespace()|class_name_webidl }}Shared.h"
#include "mozilla/dom/{{ obj.name()|class_name_webidl }}Binding.h"

namespace mozilla {
namespace dom {
namespace {{ ci.namespace() }} {

class {{ obj.name()|class_name_cpp }} final {
 public:
  // TODO: We may not need the cycle collecting machinery if all calls create
  // a new object. See the note about `[NewObject]` in
  // https://developer.mozilla.org/en-US/docs/Mozilla/WebIDL_bindings.
  // NS_DECL_CYCLE_COLLECTING_ISUPPORTS
  // NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS({{ obj.name()|class_name_cpp }})

  {{ obj.name()|class_name_cpp }}() = default;

  // TODO: More WebIDL machinery (`WrapJSObject`, `GetParentObject`, etc.)

 private:
  ~{{ obj.name()|class_name_cpp }}();

  mozilla::Atomic<int64_t> mHandle;
};

}  // namespace {{ ci.namespace() }}
}  // namespace dom
}  // namespace mozilla

#endif  // mozilla_dom_{{ obj.name()|class_name_webidl }}
